					
					DAY 4 ASSIGNMENT

Q 1) 

typedef struct Node{
    int data;
    struct Node *link;
}Node;


Node *head = NULL;

Node *insert_any(int index,int d){
    Node *p = NULL;
    Node *q= (Node*)malloc (sizeof(Node));
    p=head;
    if(index!=0){
    int i=index-1;
    while(i--){
        p=p->link;
    }}
    q->data=d;
    if(index!=0){
        q->link=p->link;
        p->link=q;
    }
    else{
       q->link=p;
       head=q;
    }
	 
    return head;
    
}


===============================================================================

Q 2)

typedef struct Node{
    int data;
    struct Node *link;
}Node;

Node *head = NULL;

Node* delete_beg(){
    Node *q= (Node*)malloc(sizeof(Node));
    p=head;
    head=head->link;
    free(p);
    return head;
}

==================================================================================

Q 3)

Node* delete_end(){
    Node *p = (Node*)malloc(sizeof(Node));
    p=head;
    int n=0;
    while(p->link!=NULL) {p=p->link; n++;}
    free(p);
    p=head;
    n--;
    while(n--){
         p=p->link;
    }
    p->link=NULL;
    return head;
}

===================================================================================

Q 4)

In the Binary Search algorithm, it is suggested to calculate the mid as beg + (end - beg) / 2
instead of (beg + end) /2 coz of OVERFLOW ISSUES in case of (beg+end)/2. i.e There may be cases
when addition of beg and end may result in the data crossing the limit of a data type.This causes 
overflow issues bt in the other option subtraction is done.Thus overflow issue can be reduced.

===================================================================================

Q 5)

FUNCTION :
	
int tSearch(int beg, int end, int key, int a[])
{
    if (end >= beg) {
        int mid1 = beg + (end - beg) / 3;
        int mid2 = end - (end - beg) / 3;
 
        if (a[mid1] == key) {
            return mid1;
        }
        if (a[mid2] == key) {
            return mid2;
        }
 
        if (key < a[mid1]) {
            return tSearch(l, mid1 - 1, key, a);
        }
        else if (key > a[mid2]) {
            return tSearch(mid2 + 1, r, key, a);
        }
        else {
            return tSearch(mid1 + 1, mid2 - 1, key, a);
        }
    }
    return -1;
}


ALGORITHM:

> First, we compare the key with the element at mid1. If found equal, we return mid1.
> If not, then we compare the key with the element at mid2. If found equal, we return mid2.
> If not, then we check whether the key is less than the element at mid1. If yes, then recur to the first part.
> If not, then we check whether the key is greater than the element at mid2. If yes, then recur to the third part.
> If not, then we recur to the second (middle) part.



